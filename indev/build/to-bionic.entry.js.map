{"file":"to-bionic.entry.esm.js","mappings":";;AAAA,MAAM,aAAa,GAAG,wIAAwI;;ACE9J;AACA,MAAM,cAAc,GAAG,CAAC,IAAiB,EAAE,yBAAkC,KAAK;EAChF,MAAM,SAAS,GAAW,EAAE,EAAE,oBAAoB,GAAG,IAAI,CAAC;EAE1D,MAAM,YAAY,GAAG,CAAC,IAAe;IACnC,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,EAAE;MACvB,IAAI,sBAAsB,IAAI,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;QACvE,SAAS,CAAC,IAAI,CAAC,IAAY,CAAC,CAAC;OAC9B;KACF;SAAM,IAAI,EAAG,IAAoB,CAAC,OAAO,IAAI,QAAQ,IAAK,IAAoB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE;MAC1G,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;QAC1D,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;OAClC;KACF;GACF,CAAA;EAED,YAAY,CAAC,IAAI,CAAC,CAAC;EACnB,OAAO,SAAS,CAAC;AACnB,CAAC,CAAA;MAOY,UAAU;;;;EAGrB,aAAa;IACX,MAAM,SAAS,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAE/C,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;MAChC,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC;MAC9B,MAAM,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;MAEzC,MAAM,aAAa,GAAG,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;MAC1D,MAAM,WAAW,GAAgB,EAAE,CAAC;MACpC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,QAAQ,CAAC,OAAO,EAAE,EAAE;QAC7C,IAAI,GAAG,GAAG,CAAC,IAAI,aAAa,EAAE;UAC5B,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;UACjD,SAAS;SACV;QAED,MAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9D,MAAM,GAAG,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAG1C,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC9C,MAAM,CAAC,YAAY,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAChC,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC;QACzB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEzB,IAAI,GAAG,CAAC,MAAM,EAAE;UACd,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;UAC/C,OAAO,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;UACnC,OAAO,CAAC,SAAS,GAAG,GAAG,CAAC;UACxB,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC3B;OACF;MACD,QAAQ,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,CAAC;KACtC;GACF;EAED,MAAM;IACJ,IAAI,CAAC,aAAa,EAAE,CAAC;GACtB;;;;;;;","names":[],"sources":["./src/components/bionic-transform/bionic-text.css?tag=to-bionic","./src/components/bionic-transform/bionic-text.tsx"],"sourcesContent":["to-bionic:not([disabled]) span[bold] {\r\n  font-weight: bold !important;\r\n}\r\nto-bionic:not([disabled]) span[normal] {\r\n  font-weight: normal !important;\r\n}","import { Component, Element } from '@stencil/core';\r\n\r\n// From http://stackoverflow.com/a/4399718/843621\r\nconst getTextNodesIn = (node: HTMLElement, includeWhitespaceNodes: boolean = false) => {\r\n  const textNodes: Text[] = [], nonWhitespaceMatcher = /\\S/;\r\n\r\n  const getTextNodes = (node: ChildNode) => {\r\n    if (node.nodeType === 3) {\r\n      if (includeWhitespaceNodes || nonWhitespaceMatcher.test(node.nodeValue)) {\r\n        textNodes.push(node as Text);\r\n      }\r\n    } else if (!((node as HTMLElement).tagName == \"SCRIPT\" || (node as HTMLElement).hasAttribute(\"no-bionic\"))) {\r\n      for (let i = 0, end = node.childNodes.length; i < end; i++) {\r\n        getTextNodes(node.childNodes[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  getTextNodes(node);\r\n  return textNodes;\r\n}\r\n\r\n@Component({\r\n  tag: 'to-bionic',\r\n  styleUrl: 'bionic-text.css',\r\n  shadow: false\r\n})\r\nexport class BionicText {\r\n  @Element() element: HTMLElement;\r\n\r\n  formatContent() {\r\n    const textNodes = getTextNodesIn(this.element);\r\n\r\n    for (const textNode of textNodes) {\r\n      const content = textNode.data;\r\n      const splitted = content.split(/(\\s+)/g);\r\n      \r\n      const whitespaceIdx = ((/\\s+/).test(splitted[0])) ? 0 : 1;\r\n      const replacement: ChildNode[] = [];\r\n      for (const [idx, split] of splitted.entries()) {\r\n        if (idx % 2 == whitespaceIdx) {\r\n          replacement.push(document.createTextNode(split));\r\n          continue;\r\n        }\r\n\r\n        const start = split.substring(0, Math.ceil(split.length / 2));\r\n        const end = split.substring(start.length);\r\n\r\n        \r\n        const embold = document.createElement(\"span\");\r\n        embold.setAttribute(\"bold\", \"\");\r\n        embold.innerText = start;\r\n        replacement.push(embold);\r\n\r\n        if (end.length) {\r\n          const regular = document.createElement(\"span\");\r\n          regular.setAttribute(\"normal\", \"\");\r\n          regular.innerText = end;\r\n          replacement.push(regular);\r\n        }\r\n      }\r\n      textNode.replaceWith(...replacement);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.formatContent();\r\n  } \r\n}"],"version":3}